// properties([pipelineTriggers([githubPush()])])
pipeline {
    agent {
        label "master"
    }
    tools {
        maven "maven3"
    }
    environment {
        NEXUS_VERSION = "nexus3"
        NEXUS_PROTOCOL = "http"
        NEXUS_URL = "10.0.1.11:8081"
        NEXUS_REPOSITORY = "maven_repo"
        NEXUS_CREDENTIAL_ID = "nexus_credentials"
    }
    stages {
        stage("CLEAN workspace") {
          steps {
            script {
              sh "pwd"
              sh "ls -l"
              deleteDir()
              sh "ls -l"
            }
          }
        }
        stage("CHECKOUT from VCS") {
            steps {
              checkout([
                $class: 'GitSCM', 
                branches: [[name: '*/master']], 
                doGenerateSubmoduleConfigurations: false, 
                extensions: [], 
                submoduleCfg: [], 
                userRemoteConfigs: [[credentialsId: 'github_skoriy88', url: 'https://github.com/skoriy88/simple-springboot-app.git']]
              ])
            }
        }
        stage("BUILD with Maven3") {
            steps {
                // sh 'mvn clean install'
                sh 'mvn package -DskipTests=true'
            }
        }
        stage("UPLOAD ARTIFACT to Nexus Repository Manager") {
            steps {
                script {
                    pom = readMavenPom file: "pom.xml";
                    filesByGlob = findFiles(glob: "target/*.${pom.packaging}");
                    echo "Find artifact"
                    echo "${filesByGlob[0].name}, ${filesByGlob[0].path}, ${filesByGlob[0].directory}, ${filesByGlob[0].length}, ${filesByGlob[0].lastModified}"
                    artifactPath = filesByGlob[0].path;
                    artifactExists = fileExists artifactPath;
                    if(artifactExists) {
                        echo "Start uploading artifact"
                        echo "*** File: ${artifactPath}, group: ${pom.groupId}, packaging: ${pom.packaging}, version ${pom.version}";
                        nexusArtifactUploader(
                            nexusVersion: NEXUS_VERSION,
                            protocol: NEXUS_PROTOCOL,
                            nexusUrl: NEXUS_URL,
                            groupId: pom.groupId,
                            //version: pom.version,
                            version: "${pom.version}.${BUILD_NUMBER}",
                            repository: NEXUS_REPOSITORY,
                            credentialsId: NEXUS_CREDENTIAL_ID,
                            artifacts: [
                                [artifactId: pom.artifactId,
                                classifier: '',
                                file: artifactPath,
                                type: pom.packaging],
                                [artifactId: pom.artifactId,
                                classifier: '',
                                file: "pom.xml",
                                type: "pom"]
                            ]
                        );
                    } else {
                        error "*** File: ${artifactPath}, could not be found";
                    }
                }
            }
        }
        stage("CI PROVISION using Ansible role") {
          steps {
            script {
              ansiblePlaybook become: true, colorized: true, credentialsId: 'ansible_credentials',  disableHostKeyChecking: true, installation: 'ansible', inventory: '/opt/ansible_playbooks/hosts', playbook: '/opt/ansible_playbooks/provisioning.yml'
            }
          }
        }
        stage("DEPLOY to CI using Ansible role") {
          steps {
            script {
              sh "pwd"
              ansiblePlaybook become: true, colorized: true, credentialsId: 'ansible_credentials',  disableHostKeyChecking: true, installation: 'ansible', inventory: '/opt/ansible_playbooks/hosts', playbook: '/opt/ansible_playbooks/deploy_artifact.yml'
            }
          }
        }
        stage("Creating docker image using Ansible role") {
          steps {
            sh "whoami"
            sh "pwd"
            sh "echo 'build_number: ${BUILD_NUMBER}' > /opt/ansible_playbooks/docker/vars.yml"
            
            script {
                ansiblePlaybook become: true, credentialsId: 'ansible_credentials',  disableHostKeyChecking: true, installation: 'ansible', inventory: '/opt/ansible_playbooks/hosts', playbook: '/opt/ansible_playbooks/build_container.yml'

            }
          }
        }
    }
}     